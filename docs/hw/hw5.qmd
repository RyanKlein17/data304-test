---
title: "hw5"
author: "Ryan Klein"
format: html
editor: visual
embed-resource: true
---

## Homework 5

Import Packages

```{python}
import altair as alt
import pandas as pd
from altair import datum
```

```{python}
alt.data_transformers.disable_max_rows()
```

### Wide-to-long "Your Turn"

Read in the data

```{python}
jobs_url = "https://cdn.jsdelivr.net/npm/vega-datasets@2.8.0/data/jobs.json"
jobs = pd.read_json(jobs_url)
```

#### Part 1: Plot 1
```{python}
alt.Chart(jobs).transform_pivot(
    'year',
    groupby=['sex', 'job'],
    value='perc'
).mark_circle().encode(
    alt.X(field = "1950", type = "quantitative").scale(constant = 0.0001, type='symlog'),
    alt.Y(field = "2000", type = "quantitative").scale(constant = 0.0001, type='symlog'),
    tooltip=['job:N', 'sex:N']
).properties(width = 400, height = 400
).facet(
  column = "sex"
).configure_mark(
    opacity=0.4
)
```

#### Part 1: Plot 2
```{python}
base = alt.Chart(jobs).transform_pivot(
    'year',
    groupby=['sex', 'job', 'year', 'perc'],
    value='perc'
).encode(
    alt.X(field = "year", type = "nominal"),
    alt.Y(field = "perc", type = "quantitative").scale(constant = 0.0001, type='symlog'),
    color="job:N"
).properties(width = 600, height = 100
).transform_filter(
    (datum.job == "Farmer")
)

base2 = alt.Chart(jobs).transform_pivot(
    'year',
    groupby=['sex', 'job', 'year', 'perc'],
    value='perc'
).encode(
    alt.X(field = "year", type = "nominal"),
    alt.Y(field = "perc", type = "quantitative").scale(constant = 0.0001, type='symlog'),
    color="job:N"
).properties(width = 600, height = 100
).transform_filter(
    (datum.job == "Professor")
)

(base.mark_line() + base.mark_circle() + base2.mark_line() + base2.mark_circle()).facet(
  row="sex"
)
```

#### Part 1: Plot 3
```{python}
base = alt.Chart(jobs).transform_pivot(
    'year',
    groupby=['sex', 'job', 'year', 'perc'],
    value='perc'
).encode(
    alt.X(field = "year", type = "nominal"),
    alt.Y(field = "perc", type = "quantitative").scale(constant = 0.0001, type='symlog'),
    color="job:N"
).properties(width = 600, height = 100
).transform_filter(
    (datum.job == "Statistician / Actuary")
)

base2 = alt.Chart(jobs).transform_pivot(
    'year',
    groupby=['sex', 'job', 'year', 'perc'],
    value='perc'
).encode(
    alt.X(field = "year", type = "nominal"),
    alt.Y(field = "perc", type = "quantitative").scale(constant = 0.0001, type='symlog'),
    color="job:N"
).properties(width = 600, height = 100
).transform_filter(
    (datum.job == "Funeral Director")
)

(base.mark_line() + base.mark_circle() + base2.mark_line() + base2.mark_circle()).facet(
  row="sex"
)
```

### Gapminder
#### Part 2: Plot 1
```{python}
from vega_datasets import data
countries = alt.topo_feature('https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json', feature='countries')
country_map = alt.Chart(countries).mark_geoshape(
    fill='#aaaaaa',
    stroke='#ffffff'
).project('mercator')

country_map.properties(width = 600, height = 400)
```

```{python}
# Import gapminder data
gap_data = pd.read_json("https://cdn.jsdelivr.net/npm/vega-datasets@1.29.0/data/countries.json")

# Selected data from the year 2000.
gd2000 = gap_data.loc[gap_data['year'] == 2000] 

# We changed the names of some of the countries so that they matched the labels within the map.  There were only two countries that had mislabeled data.
gd2000.at[619, 'country'] = "United States of America"
gd2000.at[189, 'country'] = "Dem. Rep. Congo"
gd2000["country"][619]
gd2000["country"][189]
```



```{python}
country_map.transform_lookup(
  lookup='properties.name',
  from_=alt.LookupData(gd2000, 'country', ['life_expect'])
  ).encode(
    fill = "life_expect:Q"
    ).properties(width = 600, height = 400)
```


#### Part 2: Plot 2
```{python}
airport_data = pd.read_csv("https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv")
airports_per_state = airport_data.value_counts("state")
airports_per_state
```

```{python}
states_url = 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'

states = alt.topo_feature(states_url , feature = 'states')
state_map = alt.Chart(states).mark_geoshape(
    fill = 'transparent',
    stroke = 'steelblue'
    # tried to add "tooltip = ['id:Q'] but this did not work.
).project('albersUsa')

state_map.properties(width = 500, height = 300)
```

```{python}
import json 
from urllib.request import urlopen
state_json = json.load(urlopen(states_url))
print(type(state_json))
(state_json.keys())
```

```{python}
print(state_json['objects']['states']['geometries'][0])
```